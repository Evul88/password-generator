import {
  __commonJS
} from "./chunk-Y2F7D3TJ.js";

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/generate-password/src/generate.js
var require_generate = __commonJS({
  "node_modules/generate-password/src/generate.js"(exports, module) {
    var crypto = require_crypto();
    var RANDOM_BATCH_SIZE = 256;
    var randomIndex;
    var randomBytes;
    var getNextRandomValue = function() {
      if (randomIndex === void 0 || randomIndex >= randomBytes.length) {
        randomIndex = 0;
        randomBytes = crypto.randomBytes(RANDOM_BATCH_SIZE);
      }
      var result = randomBytes[randomIndex];
      randomIndex += 1;
      return result;
    };
    var randomNumber = function(max) {
      var rand = getNextRandomValue();
      while (rand >= 256 - 256 % max) {
        rand = getNextRandomValue();
      }
      return rand % max;
    };
    var lowercase = "abcdefghijklmnopqrstuvwxyz";
    var uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var numbers = "0123456789";
    var symbols = '!@#$%^&*()+_-=}{[]|:;"/?.><,`~';
    var similarCharacters = /[ilLI|`oO0]/g;
    var strictRules = [
      { name: "lowercase", rule: /[a-z]/ },
      { name: "uppercase", rule: /[A-Z]/ },
      { name: "numbers", rule: /[0-9]/ },
      { name: "symbols", rule: /[!@#$%^&*()+_\-=}{[\]|:;"/?.><,`~]/ }
    ];
    var generate = function(options, pool) {
      var password = "", optionsLength = options.length, poolLength = pool.length;
      for (var i = 0; i < optionsLength; i++) {
        password += pool[randomNumber(poolLength)];
      }
      if (options.strict) {
        var fitsRules = strictRules.every(function(rule) {
          if (options[rule.name] == false)
            return true;
          if (rule.name === "symbols" && typeof options[rule.name] === "string") {
            var re = new RegExp("[" + options[rule.name] + "]");
            return re.test(password);
          }
          return rule.rule.test(password);
        });
        if (!fitsRules)
          return generate(options, pool);
      }
      return password;
    };
    module.exports.generate = function(options) {
      options = options || {};
      if (!Object.prototype.hasOwnProperty.call(options, "length"))
        options.length = 10;
      if (!Object.prototype.hasOwnProperty.call(options, "numbers"))
        options.numbers = false;
      if (!Object.prototype.hasOwnProperty.call(options, "symbols"))
        options.symbols = false;
      if (!Object.prototype.hasOwnProperty.call(options, "exclude"))
        options.exclude = "";
      if (!Object.prototype.hasOwnProperty.call(options, "uppercase"))
        options.uppercase = true;
      if (!Object.prototype.hasOwnProperty.call(options, "lowercase"))
        options.lowercase = true;
      if (!Object.prototype.hasOwnProperty.call(options, "excludeSimilarCharacters"))
        options.excludeSimilarCharacters = false;
      if (!Object.prototype.hasOwnProperty.call(options, "strict"))
        options.strict = false;
      if (options.strict) {
        var minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);
        if (minStrictLength > options.length) {
          throw new TypeError("Length must correlate with strict guidelines");
        }
      }
      var pool = "";
      if (options.lowercase) {
        pool += lowercase;
      }
      if (options.uppercase) {
        pool += uppercase;
      }
      if (options.numbers) {
        pool += numbers;
      }
      if (options.symbols) {
        if (typeof options.symbols === "string") {
          pool += options.symbols;
        } else {
          pool += symbols;
        }
      }
      if (!pool) {
        throw new TypeError("At least one rule for pools must be true");
      }
      if (options.excludeSimilarCharacters) {
        pool = pool.replace(similarCharacters, "");
      }
      var i = options.exclude.length;
      while (i--) {
        pool = pool.replace(options.exclude[i], "");
      }
      var password = generate(options, pool);
      return password;
    };
    module.exports.generateMultiple = function(amount, options) {
      var passwords = [];
      for (var i = 0; i < amount; i++) {
        passwords[i] = module.exports.generate(options);
      }
      return passwords;
    };
  }
});

// node_modules/generate-password/main.js
var require_main = __commonJS({
  "node_modules/generate-password/main.js"(exports, module) {
    module.exports = require_generate();
  }
});
export default require_main();
//# sourceMappingURL=generate-password.js.map
